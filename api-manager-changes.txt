--- movie-source/fix_embed_links.py	2025-08-19 07:51:48.319445569 +0000
+++ "Api Manager/app/src/main/java/com/cinecraze/android/services/AutoEmbedService.java"	2025-08-19 08:15:22.398667065 +0000
@@ -1,168 +1,768 @@
-#!/usr/bin/env python3
-"""
-Fix Embed Links Script
-This script fixes the placeholder embedded links in JSON files by replacing them with proper TMDB-based URLs.
-"""
-
-import json
-import re
-import sys
-from typing import Dict, List, Any
-
-# TMDB ID mappings (you'll need to add more as needed)
-TMDB_MOVIE_IDS = {
-    "Superman": "1242514",  # Superman Legacy (2025)
-    "Jurassic World Rebirth": "1079091",  # Jurassic World Rebirth (2025)
-    # Add more movie mappings here as needed
-}
-
-TMDB_TV_IDS = {
-    "Wednesday": "119051",  # Wednesday (2022)
-    "The Sandman": "90802",  # The Sandman (2022)
-    # Add more TV show mappings here as needed
-}
-
-def get_proper_embed_urls(title: str, is_tv_series: bool = False, season: int = None, episode: int = None) -> List[Dict[str, str]]:
-    """Generate proper embed URLs for a given title"""
-    
-    if is_tv_series:
-        tmdb_id = TMDB_TV_IDS.get(title)
-        if not tmdb_id:
-            print(f"Warning: No TMDB ID found for TV series '{title}', using placeholder")
-            tmdb_id = "PLACEHOLDER_TV_ID"
-        
-        season_num = season or 1
-        episode_num = episode or 1
-        
-        return [
-            {"name": "VidSrc 1080p", "url": f"https://vidsrc.net/embed/tv/{tmdb_id}/{season_num}/{episode_num}"},
-            {"name": "VidJoy 1080p", "url": f"https://vidjoy.pro/embed/tv/{tmdb_id}/{season_num}/{episode_num}"},
-            {"name": "MultiEmbed 1080p", "url": f"https://multiembed.mov/directstream.php?video_id={tmdb_id}&tmdb=1&s={season_num}&e={episode_num}"},
-            {"name": "Embed.su 1080p", "url": f"https://embed.su/embed/tv/{tmdb_id}/{season_num}/{episode_num}"},
-            {"name": "VidSrc.me 1080p", "url": f"https://vidsrc.me/embed/tv/{tmdb_id}/{season_num}/{episode_num}"},
-            {"name": "AutoEmbed 1080p", "url": f"https://player.autoembed.cc/embed/tv/{tmdb_id}/{season_num}/{episode_num}"},
-            {"name": "SmashyStream 1080p", "url": f"https://player.smashy.stream/movie/{tmdb_id}?s={season_num}&e={episode_num}"},
-            {"name": "VidSrc.to 1080p", "url": f"https://vidsrc.to/embed/tv/{tmdb_id}/{season_num}/{episode_num}"},
-            {"name": "VidSrc.xyz 1080p", "url": f"https://vidsrc.xyz/embed/tv/{tmdb_id}/{season_num}/{episode_num}"},
-            {"name": "EmbedSoap 1080p", "url": f"https://www.embedsoap.com/embed/tv/{tmdb_id}/{season_num}/{episode_num}"},
-            {"name": "MoviesAPI 1080p", "url": f"https://moviesapi.club/movie/{tmdb_id}?s={season_num}&e={episode_num}"},
-            {"name": "DBGO 1080p", "url": f"https://dbgo.fun/movie/{tmdb_id}?s={season_num}&e={episode_num}"},
-            {"name": "FlixHQ 1080p", "url": f"https://flixhq.to/watch/tv/{tmdb_id}/{season_num}/{episode_num}"},
-            {"name": "GoMovies 1080p", "url": f"https://gomovies.sx/watch/tv/{tmdb_id}/{season_num}/{episode_num}"},
-            {"name": "ShowBox 1080p", "url": f"https://www.showbox.media/embed/tv/{tmdb_id}/{season_num}/{episode_num}"},
-            {"name": "PrimeWire 1080p", "url": f"https://primewire.mx/embed/tv/{tmdb_id}/{season_num}/{episode_num}"},
-            {"name": "HDToday 1080p", "url": f"https://hdtoday.tv/embed/tv/{tmdb_id}/{season_num}/{episode_num}"},
-            {"name": "VidCloud 1080p", "url": f"https://vidcloud.to/embed/tv/{tmdb_id}/{season_num}/{episode_num}"},
-            {"name": "StreamWish 1080p", "url": f"https://streamwish.to/e/{tmdb_id}_s{season_num}e{episode_num}"},
-            {"name": "DoodStream 1080p", "url": f"https://doodstream.com/e/{tmdb_id}_s{season_num}e{episode_num}"},
-            {"name": "StreamTape 1080p", "url": f"https://streamtape.com/e/{tmdb_id}_s{season_num}e{episode_num}"},
-            {"name": "MixDrop 1080p", "url": f"https://mixdrop.co/e/{tmdb_id}_s{season_num}e{episode_num}"},
-            {"name": "FileMoon 1080p", "url": f"https://filemoon.sx/e/{tmdb_id}_s{season_num}e{episode_num}"},
-            {"name": "UpStream 1080p", "url": f"https://upstream.to/embed-{tmdb_id}s{season_num}e{episode_num}.html"},
-            {"name": "GoDrivePlayer 1080p", "url": f"https://godriveplayer.com/embed/{tmdb_id}?s={season_num}&e={episode_num}"},
-            {"name": "2Embed.cc 1080p", "url": f"https://2embed.cc/embed/{tmdb_id}?s={season_num}&e={episode_num}"},
-            {"name": "VidLink.pro 1080p", "url": f"https://vidlink.pro/movie/{tmdb_id}?s={season_num}&e={episode_num}"}
-        ]
-    else:
-        tmdb_id = TMDB_MOVIE_IDS.get(title)
-        if not tmdb_id:
-            print(f"Warning: No TMDB ID found for movie '{title}', using placeholder")
-            tmdb_id = "PLACEHOLDER_MOVIE_ID"
-        
-        return [
-            {"name": "VidSrc 1080p", "url": f"https://vidsrc.net/embed/movie/{tmdb_id}"},
-            {"name": "VidJoy 1080p", "url": f"https://vidjoy.pro/embed/movie/{tmdb_id}"},
-            {"name": "MultiEmbed 1080p", "url": f"https://multiembed.mov/directstream.php?video_id={tmdb_id}&content_type=movie"},
-            {"name": "Embed.su 1080p", "url": f"https://embed.su/embed/movie/{tmdb_id}"},
-            {"name": "VidSrc.me 1080p", "url": f"https://vidsrc.me/embed/movie/{tmdb_id}"},
-            {"name": "AutoEmbed 1080p", "url": f"https://player.autoembed.cc/embed/movie/{tmdb_id}"},
-            {"name": "SmashyStream 1080p", "url": f"https://player.smashy.stream/movie/{tmdb_id}"},
-            {"name": "VidSrc.to 1080p", "url": f"https://vidsrc.to/embed/movie/{tmdb_id}"},
-            {"name": "VidSrc.xyz 1080p", "url": f"https://vidsrc.xyz/embed/movie/{tmdb_id}"},
-            {"name": "EmbedSoap 1080p", "url": f"https://www.embedsoap.com/embed/movie/{tmdb_id}"},
-            {"name": "MoviesAPI 1080p", "url": f"https://moviesapi.club/movie/{tmdb_id}"},
-            {"name": "DBGO 1080p", "url": f"https://dbgo.fun/movie/{tmdb_id}"},
-            {"name": "FlixHQ 1080p", "url": f"https://flixhq.to/watch/movie/{tmdb_id}"},
-            {"name": "GoMovies 1080p", "url": f"https://gomovies.sx/watch/movie/{tmdb_id}"},
-            {"name": "ShowBox 1080p", "url": f"https://www.showbox.media/embed/movie/{tmdb_id}"},
-            {"name": "PrimeWire 1080p", "url": f"https://primewire.mx/embed/movie/{tmdb_id}"},
-            {"name": "HDToday 1080p", "url": f"https://hdtoday.tv/embed/movie/{tmdb_id}"},
-            {"name": "VidCloud 1080p", "url": f"https://vidcloud.to/embed/movie/{tmdb_id}"},
-            {"name": "StreamWish 1080p", "url": f"https://streamwish.to/e/{tmdb_id}"},
-            {"name": "DoodStream 1080p", "url": f"https://doodstream.com/e/{tmdb_id}"},
-            {"name": "StreamTape 1080p", "url": f"https://streamtape.com/e/{tmdb_id}"},
-            {"name": "MixDrop 1080p", "url": f"https://mixdrop.co/e/{tmdb_id}"},
-            {"name": "FileMoon 1080p", "url": f"https://filemoon.sx/e/{tmdb_id}"},
-            {"name": "UpStream 1080p", "url": f"https://upstream.to/embed-{tmdb_id}.html"},
-            {"name": "GoDrivePlayer 1080p", "url": f"https://godriveplayer.com/embed/{tmdb_id}"},
-            {"name": "2Embed.cc 1080p", "url": f"https://2embed.cc/embed/{tmdb_id}"},
-            {"name": "VidLink.pro 1080p", "url": f"https://vidlink.pro/movie/{tmdb_id}"}
-        ]
-
-def fix_movie_entry(entry: Dict[str, Any]) -> Dict[str, Any]:
-    """Fix a movie entry by replacing placeholder URLs"""
-    title = entry.get("Title", "")
-    if "Servers" in entry:
-        entry["Servers"] = get_proper_embed_urls(title, is_tv_series=False)
-    return entry
-
-def fix_tv_entry(entry: Dict[str, Any]) -> Dict[str, Any]:
-    """Fix a TV series entry by replacing placeholder URLs"""
-    title = entry.get("Title", "")
-    
-    if "Seasons" in entry:
-        for season in entry["Seasons"]:
-            season_num = season.get("Season", 1)
-            if "Episodes" in season:
-                for episode in season["Episodes"]:
-                    episode_num = episode.get("Episode", 1)
-                    if "Servers" in episode:
-                        episode["Servers"] = get_proper_embed_urls(title, is_tv_series=True, season=season_num, episode=episode_num)
-    elif "Servers" in entry:
-        # Handle TV entry with direct servers (not nested in seasons/episodes)
-        entry["Servers"] = get_proper_embed_urls(title, is_tv_series=True)
-    
-    return entry
-
-def fix_json_file(input_file: str, output_file: str = None):
-    """Fix a JSON file by replacing placeholder URLs with proper embed links"""
-    if output_file is None:
-        output_file = input_file.replace('.json', '_fixed.json')
-    
-    try:
-        with open(input_file, 'r', encoding='utf-8') as f:
-            data = json.load(f)
-        
-        if "Categories" in data:
-            for category in data["Categories"]:
-                main_category = category.get("MainCategory", "")
-                
-                if "Entries" in category:
-                    for entry in category["Entries"]:
-                        if main_category == "TV Series" or "Seasons" in entry:
-                            entry = fix_tv_entry(entry)
-                        else:
-                            entry = fix_movie_entry(entry)
-        
-        with open(output_file, 'w', encoding='utf-8') as f:
-            json.dump(data, f, indent=2, ensure_ascii=False)
-        
-        print(f"Fixed file saved as: {output_file}")
-        
-    except Exception as e:
-        print(f"Error processing {input_file}: {str(e)}")
-
-def main():
-    """Main function"""
-    if len(sys.argv) < 2:
-        print("Usage: python fix_embed_links.py <input_file> [output_file]")
-        print("Example: python fix_embed_links.py placeholder.json placeholder_fixed.json")
-        return
+package com.cinecraze.android.services;
+
+import android.util.Log;
+import com.cinecraze.android.models.ServerConfig;
+import okhttp3.OkHttpClient;
+import okhttp3.Request;
+import okhttp3.Response;
+import java.io.IOException;
+import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
+public class AutoEmbedService {
     
-    input_file = sys.argv[1]
-    output_file = sys.argv[2] if len(sys.argv) > 2 else None
+    private static final String TAG = "AutoEmbedService";
+    private final OkHttpClient client;
+    private final ExecutorService executor;
+    private final java.util.Map<String, ServerStatusCache> statusCache;
+    private static final long CACHE_DURATION = 5 * 60 * 1000; // 5 minutes
     
-    fix_json_file(input_file, output_file)
+    private static class ServerStatusCache {
+        final boolean isOnline;
+        final long timestamp;
+        
+        ServerStatusCache(boolean isOnline) {
+            this.isOnline = isOnline;
+            this.timestamp = System.currentTimeMillis();
+        }
+        
+        boolean isValid() {
+            return (System.currentTimeMillis() - timestamp) < CACHE_DURATION;
+        }
+    }
+
+    public AutoEmbedService() {
+        this.client = new OkHttpClient();
+        this.executor = Executors.newFixedThreadPool(5);
+        this.statusCache = new java.util.concurrent.ConcurrentHashMap<>();
+    }
+
+    public List<String> generateAutoEmbedUrls(String title, List<ServerConfig> enabledServers) {
+        // Backward-compatible wrapper: build a temporary ContentItem
+        com.cinecraze.android.models.ContentItem temp = new com.cinecraze.android.models.ContentItem(title, "Movie");
+        return generateAutoEmbedUrls(temp, enabledServers);
+    }
+
+    public List<String> generateAutoEmbedUrls(com.cinecraze.android.models.ContentItem item, List<ServerConfig> enabledServers) {
+        List<String> urls = new ArrayList<>();
+        if (item == null) return urls;
+
+        String title = item.getTitle();
+        if (title == null || title.trim().isEmpty()) return urls;
+
+        String encodedTitle = URLEncoder.encode(title.trim(), StandardCharsets.UTF_8);
+
+        for (ServerConfig server : enabledServers) {
+            if (!server.isEnabled()) continue;
+            String url = generateUrlForServer(server, item, encodedTitle);
+            if (url != null) {
+                urls.add(server.getName() + " 1080p|" + url);
+            }
+        }
+
+        Log.i(TAG, "Generated " + urls.size() + " auto-embed URLs for: " + title);
+        return urls;
+    }
+
+    private String generateUrlForServer(ServerConfig server, com.cinecraze.android.models.ContentItem item, String encodedTitle) {
+        String baseUrl = server.getBaseUrl();
+        if (baseUrl == null || baseUrl.isEmpty()) {
+            baseUrl = server.getRecommendedBaseUrl();
+        }
+        if (baseUrl == null || baseUrl.isEmpty()) {
+            Log.w(TAG, "No base URL for server: " + server.getName());
+            return null;
+        }
+
+        // Remove trailing slash if present
+        if (baseUrl.endsWith("/")) {
+            baseUrl = baseUrl.substring(0, baseUrl.length() - 1);
+        }
+
+        String name = server.getName() == null ? "" : server.getName().toLowerCase();
+        Integer tmdbId = item.getTmdbId();
+        Integer season = item.getSeason();
+        Integer episode = item.getEpisode();
+        boolean isMovie = "Movie".equals(item.getType());
+        boolean isSeries = "TV Series".equals(item.getType());
 
-if __name__ == "__main__":
-    main()
\ No newline at end of file
+
+
+        // Prefer TMDB-based URLs for VidSrc family
+        switch (name) {
+            case "vidsrc":
+            case "vidsrc.to":
+            case "vidsrc.me":
+            case "vidsrc.xyz":
+                // Always build from domain to avoid leftover path segments or placeholders
+                String baseDomain = extractBaseDomain(baseUrl);
+                if (tmdbId != null) {
+                    if (isMovie) {
+                        return baseDomain + "/embed/movie?tmdb=" + tmdbId;
+                    } else if (isSeries) {
+                        if (season != null && episode != null) {
+                            return baseDomain + "/embed/tv?tmdb=" + tmdbId + "&season=" + season + "&episode=" + episode;
+                        }
+                        return baseDomain + "/embed/tv?tmdb=" + tmdbId;
+                    }
+                }
+                return baseDomain + "/embed/" + encodedTitle;
+            case "2embed.cc": {
+                String baseDomain2 = extractBaseDomain(baseUrl);
+                if (tmdbId != null) {
+                    if (isMovie) {
+                        return baseDomain2 + "/embed/movie?tmdb=" + tmdbId;
+                    } else if (isSeries) {
+                        if (season != null && episode != null) {
+                            return baseDomain2 + "/embed/tv?tmdb=" + tmdbId + "&season=" + season + "&episode=" + episode;
+                        }
+                        return baseDomain2 + "/embed/tv?tmdb=" + tmdbId;
+                    }
+                }
+                return baseDomain2 + "/embed/" + encodedTitle;
+            }
+            case "autoembed.cc": {
+                String baseDomain3 = extractBaseDomain(baseUrl);
+                if (tmdbId != null) {
+                    if (isMovie) {
+                        return baseDomain3 + "/embed/movie?tmdb=" + tmdbId;
+                    } else if (isSeries) {
+                        if (season != null && episode != null) {
+                            return baseDomain3 + "/embed/tv?tmdb=" + tmdbId + "&season=" + season + "&episode=" + episode;
+                        }
+                        return baseDomain3 + "/embed/tv?tmdb=" + tmdbId;
+                    }
+                }
+                return baseDomain3 + "/embed/" + encodedTitle;
+            }
+            case "embed.su": {
+                String baseDomain4 = extractBaseDomain(baseUrl);
+                if (tmdbId != null) {
+                    if (isMovie) {
+                        return baseDomain4 + "/embed/movie?tmdb=" + tmdbId;
+                    } else if (isSeries) {
+                        if (season != null && episode != null) {
+                            return baseDomain4 + "/embed/tv?tmdb=" + tmdbId + "&season=" + season + "&episode=" + episode;
+                        }
+                        return baseDomain4 + "/embed/tv?tmdb=" + tmdbId;
+                    }
+                }
+                return baseDomain4 + "/embed/" + encodedTitle;
+            }
+            case "vidjoy": {
+                String baseDomain5 = extractBaseDomain(baseUrl);
+                if (tmdbId != null) {
+                    if (isMovie) {
+                        return baseDomain5 + "/embed/movie?tmdb=" + tmdbId;
+                    } else if (isSeries) {
+                        if (season != null && episode != null) {
+                            return baseDomain5 + "/embed/tv?tmdb=" + tmdbId + "&season=" + season + "&episode=" + episode;
+                        }
+                        return baseDomain5 + "/embed/tv?tmdb=" + tmdbId;
+                    }
+                }
+                return baseDomain5 + "/embed/" + encodedTitle;
+            }
+            default:
+                break;
+        }
+
+        // Host-based mapping to exact patterns (from playlist.json)
+        String host = getHostFromUrl(baseUrl);
+        String h = host == null ? "" : host.toLowerCase();
+        String domain = extractBaseDomain(baseUrl);
+        if (tmdbId != null && !h.isEmpty()) {
+            // VidSrc family
+            if (h.endsWith("vidsrc.net") || h.endsWith("vidsrc.to") || h.endsWith("vidsrc.me") || h.endsWith("vidsrc.xyz")) {
+                if (isMovie) return domain + "/embed/movie/" + tmdbId;
+                if (isSeries && season != null && episode != null) return domain + "/embed/tv/" + tmdbId + "/" + season + "/" + episode;
+            }
+            // VidJoy
+            if (h.endsWith("vidjoy.pro")) {
+                if (isMovie) return domain + "/embed/movie/" + tmdbId;
+                if (isSeries && season != null && episode != null) return domain + "/embed/tv/" + tmdbId + "/" + season + "/" + episode;
+            }
+            // MultiEmbed
+            if (h.endsWith("multiembed.mov")) {
+                if (isMovie) return domain + "/directstream.php?video_id=" + tmdbId + "&content_type=movie";
+                if (isSeries && season != null && episode != null) return domain + "/directstream.php?video_id=" + tmdbId + "&tmdb=1&s=" + season + "&e=" + episode;
+            }
+            // EmbedSU
+            if (h.endsWith("embed.su")) {
+                if (isMovie) return domain + "/embed/movie/" + tmdbId;
+                if (isSeries && season != null && episode != null) return domain + "/embed/tv/" + tmdbId + "/" + season + "/" + episode;
+            }
+            // AutoEmbed
+            if (h.endsWith("autoembed.cc") || h.endsWith("player.autoembed.cc")) {
+                if (isMovie) return domain + "/embed/movie/" + tmdbId;
+                if (isSeries && season != null && episode != null) return domain + "/embed/tv/" + tmdbId + "/" + season + "/" + episode;
+            }
+            // SmashyStream
+            if (h.endsWith("smashy.stream") || h.endsWith("player.smashy.stream")) {
+                if (isMovie) return domain + "/movie/" + tmdbId;
+                if (isSeries && season != null && episode != null) return domain + "/movie/" + tmdbId + "?s=" + season + "&e=" + episode;
+            }
+            // EmbedSoap
+            if (h.endsWith("embedsoap.com") || h.endsWith("www.embedsoap.com")) {
+                if (isMovie) return domain + "/embed/movie/" + tmdbId;
+                if (isSeries && season != null && episode != null) return domain + "/embed/tv/" + tmdbId + "/" + season + "/" + episode;
+            }
+            // MoviesAPI / DBGO
+            if (h.endsWith("moviesapi.club") || h.endsWith("dbgo.fun")) {
+                if (isMovie) return domain + "/movie/" + tmdbId;
+                if (isSeries && season != null && episode != null) return domain + "/movie/" + tmdbId + "?s=" + season + "&e=" + episode;
+            }
+            // FlixHQ / GoMovies
+            if (h.endsWith("flixhq.to") || h.endsWith("gomovies.sx")) {
+                if (isMovie) return domain + "/watch/movie/" + tmdbId;
+                if (isSeries && season != null && episode != null) return domain + "/watch/tv/" + tmdbId + "/" + season + "/" + episode;
+            }
+            // ShowBox / PrimeWire / HDToday / VidCloud
+            if (h.endsWith("showbox.media") || h.endsWith("www.showbox.media") || h.endsWith("primewire.mx") || h.endsWith("hdtoday.tv") || h.endsWith("vidcloud.to")) {
+                if (isMovie) return domain + "/embed/movie/" + tmdbId;
+                if (isSeries && season != null && episode != null) return domain + "/embed/tv/" + tmdbId + "/" + season + "/" + episode;
+            }
+            // StreamWish / DoodStream / StreamTape / MixDrop / FileMoon
+            if (h.endsWith("streamwish.to") || h.endsWith("doodstream.com") || h.endsWith("streamtape.com") || h.endsWith("mixdrop.co") || h.endsWith("filemoon.sx")) {
+                if (isMovie) return domain + "/e/" + tmdbId;
+                if (isSeries && season != null && episode != null) return domain + "/e/" + tmdbId + "_s" + season + "e" + episode;
+            }
+            // UpStream
+            if (h.endsWith("upstream.to")) {
+                if (isMovie) return domain + "/embed-" + tmdbId + ".html";
+                if (isSeries && season != null && episode != null) return domain + "/embed-" + tmdbId + "s" + season + "e" + episode + ".html";
+            }
+            // GoDrivePlayer
+            if (h.endsWith("godriveplayer.com")) {
+                if (isMovie) return domain + "/embed/" + tmdbId;
+                if (isSeries && season != null && episode != null) return domain + "/embed/" + tmdbId + "?s=" + season + "&e=" + episode;
+            }
+            // 2Embed
+            if (h.endsWith("2embed.cc")) {
+                if (isMovie) return domain + "/embed/" + tmdbId;
+                if (isSeries && season != null && episode != null) return domain + "/embed/" + tmdbId + "?s=" + season + "&e=" + episode;
+            }
+            // VidLink
+            if (h.endsWith("vidlink.pro")) {
+                if (isMovie) return domain + "/movie/" + tmdbId;
+                if (isSeries && season != null && episode != null) return domain + "/movie/" + tmdbId + "?s=" + season + "&e=" + episode;
+            }
+        }
+
+        // If the configured base has placeholders, support them (but skip for TMDB-capable providers)
+        if (baseUrl.contains("{") && !isTmdbCapableHost(host)) {
+            String url = baseUrl.replace("{title}", encodedTitle);
+            if (tmdbId != null) url = url.replace("{tmdb}", String.valueOf(tmdbId));
+            if (season != null) url = url.replace("{season}", String.valueOf(season));
+            if (episode != null) url = url.replace("{episode}", String.valueOf(episode));
+            return url;
+        }
+
+        // If we have TMDB ID, use it instead of title for all services
+        if (tmdbId != null) {
+            switch (name) {
+                case "vidjoy":
+                case "multiembed":
+                case "embed.su":
+                case "autoembed.cc":
+                case "smashystream":
+                case "embedsoap":
+                case "moviesapi.club":
+                case "dbgo.fun":
+                case "showbox.media":
+                case "primewire.mx":
+                case "hdtoday.tv":
+                case "vidcloud.to":
+                case "godriveplayer.com":
+                case "2embed.cc":
+                case "nontonfilm":
+                case "cataz":
+                    if (isMovie) return baseUrl + "/embed/movie/" + tmdbId;
+                    if (isSeries && season != null && episode != null) return baseUrl + "/embed/tv/" + tmdbId + "/" + season + "/" + episode;
+                    break;
+                case "flixhq.to":
+                case "gomovies.sx":
+                    if (isMovie) return baseUrl + "/watch/movie/" + tmdbId;
+                    if (isSeries && season != null && episode != null) return baseUrl + "/watch/tv/" + tmdbId + "/" + season + "/" + episode;
+                    break;
+                case "streamwish.to":
+                case "doodstream.com":
+                case "streamtape.com":
+                case "mixdrop.co":
+                case "filemoon.sx":
+                case "streamlare.com":
+                case "streamhub.to":
+                    if (isMovie) return baseUrl + "/e/" + tmdbId;
+                    if (isSeries && season != null && episode != null) return baseUrl + "/e/" + tmdbId + "_s" + season + "e" + episode;
+                    break;
+                case "upstream.to":
+                    if (isMovie) return baseUrl + "/embed-" + tmdbId + ".html";
+                    if (isSeries && season != null && episode != null) return baseUrl + "/embed-" + tmdbId + "s" + season + "e" + episode + ".html";
+                    break;
+                case "vidlink.pro":
+                    if (isMovie) return baseUrl + "/movie/" + tmdbId;
+                    if (isSeries && season != null && episode != null) return baseUrl + "/movie/" + tmdbId + "?s=" + season + "&e=" + episode;
+                    break;
+                default:
+                    if (isMovie) return baseUrl + "/embed/movie/" + tmdbId;
+                    if (isSeries && season != null && episode != null) return baseUrl + "/embed/tv/" + tmdbId + "/" + season + "/" + episode;
+                    break;
+            }
+        }
+
+        // Fallback to title-based URLs only when TMDB ID is not available
+        Log.w(TAG, "No TMDB ID available for " + item.getTitle() + ", using title-based URL");
+        switch (name) {
+            case "vidjoy":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "multiembed":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "embed.su":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "autoembed.cc":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "smashystream":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "embedsoap":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "moviesapi.club":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "dbgo.fun":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "flixhq.to":
+                return baseUrl + "/watch/" + encodedTitle;
+            case "gomovies.sx":
+                return baseUrl + "/watch/" + encodedTitle;
+            case "showbox.media":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "primewire.mx":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "hdtoday.tv":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "vidcloud.to":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "streamwish.to":
+                return baseUrl + "/e/" + encodedTitle;
+            case "doodstream.com":
+                return baseUrl + "/e/" + encodedTitle;
+            case "streamtape.com":
+                return baseUrl + "/e/" + encodedTitle;
+            case "mixdrop.co":
+                return baseUrl + "/e/" + encodedTitle;
+            case "filemoon.sx":
+                return baseUrl + "/e/" + encodedTitle;
+            case "upstream.to":
+                return baseUrl + "/" + encodedTitle;
+            case "godriveplayer.com":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "2embed.cc":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "vidlink.pro":
+                return baseUrl + "/movie/" + encodedTitle;
+            case "streamlare.com":
+                return baseUrl + "/e/" + encodedTitle;
+            case "streamhub.to":
+                return baseUrl + "/e/" + encodedTitle;
+            case "nontonfilm":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "cataz":
+                return baseUrl + "/embed/" + encodedTitle;
+            default:
+                return baseUrl + "/embed/" + encodedTitle;
+        }
+    }
+
+    private String getHostFromUrl(String url) {
+        try {
+            java.net.URI uri = java.net.URI.create(url);
+            return uri.getHost();
+        } catch (Exception e) {
+            return null;
+        }
+    }
+
+    private boolean isTmdbCapableHost(String host) {
+        if (host == null) return false;
+        String h = host.toLowerCase();
+        return h.endsWith("vidsrc.to") || h.endsWith("vidsrc.me") || h.endsWith("vidsrc.xyz") ||
+               h.endsWith("2embed.cc") || h.endsWith("autoembed.cc") || h.endsWith("embed.su") ||
+               h.endsWith("vidjoy.pro");
+    }
+
+    private String extractBaseDomain(String url) {
+        try {
+            if (url == null || url.isEmpty()) return url;
+            int schemeIdx = url.indexOf("://");
+            if (schemeIdx == -1) return url;
+            int slashIdx = url.indexOf('/', schemeIdx + 3);
+            if (slashIdx == -1) return url;
+            return url.substring(0, slashIdx);
+        } catch (Exception e) {
+            return url;
+        }
+    }
+
+    public boolean checkServerStatus(String serverName) {
+        return checkServerStatus(serverName, 3); // Default 3 retries
+    }
+    
+    public boolean checkServerStatus(String serverName, int maxRetries) {
+        // Check cache first
+        ServerStatusCache cached = statusCache.get(serverName);
+        if (cached != null && cached.isValid()) {
+            Log.d(TAG, "Server " + serverName + " status from cache: " + (cached.isOnline ? "Online" : "Offline"));
+            return cached.isOnline;
+        }
+        
+        for (int attempt = 1; attempt <= maxRetries; attempt++) {
+            try {
+                // Generate a test embed URL for a popular movie
+                String testTitle = "The Matrix";
+                String encodedTitle = URLEncoder.encode(testTitle, StandardCharsets.UTF_8);
+                String embedUrl = generateTestEmbedUrl(serverName, encodedTitle);
+                
+                if (embedUrl == null) {
+                    Log.w(TAG, "Could not generate test URL for server: " + serverName);
+                    return false;
+                }
+                
+                // Create request with timeout
+                OkHttpClient timeoutClient = client.newBuilder()
+                    .connectTimeout(10, java.util.concurrent.TimeUnit.SECONDS)
+                    .readTimeout(15, java.util.concurrent.TimeUnit.SECONDS)
+                    .writeTimeout(10, java.util.concurrent.TimeUnit.SECONDS)
+                    .build();
+                
+                Request request = new Request.Builder()
+                    .url(embedUrl)
+                    .addHeader("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
+                    .addHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
+                    .addHeader("Accept-Language", "en-US,en;q=0.5")
+                    .addHeader("Accept-Encoding", "gzip, deflate")
+                    .addHeader("Connection", "keep-alive")
+                    .addHeader("Upgrade-Insecure-Requests", "1")
+                    .build();
+                
+                try (Response response = timeoutClient.newCall(request).execute()) {
+                    boolean isOnline = response.isSuccessful() && validateEmbedResponse(response, serverName);
+                    
+                    if (isOnline) {
+                        Log.d(TAG, "Server " + serverName + " status: Online (attempt " + attempt + ")");
+                        statusCache.put(serverName, new ServerStatusCache(true));
+                        return true;
+                    } else {
+                        Log.w(TAG, "Server " + serverName + " status: Offline (attempt " + attempt + ") - Response: " + response.code());
+                    }
+                }
+                
+            } catch (Exception e) {
+                Log.w(TAG, "Error checking status for server " + serverName + " (attempt " + attempt + "): " + e.getMessage());
+                
+                // If this is the last attempt, return false
+                if (attempt == maxRetries) {
+                    return false;
+                }
+                
+                // Wait a bit before retrying
+                try {
+                    Thread.sleep(1000 * attempt); // Progressive delay: 1s, 2s, 3s
+                } catch (InterruptedException ie) {
+                    Thread.currentThread().interrupt();
+                    return false;
+                }
+            }
+        }
+        
+        Log.w(TAG, "Server " + serverName + " failed all " + maxRetries + " attempts");
+        statusCache.put(serverName, new ServerStatusCache(false));
+        return false;
+    }
+    
+    private String generateTestEmbedUrl(String serverName, String encodedTitle) {
+        String baseUrl = getBaseUrlForServer(serverName);
+        if (baseUrl == null) {
+            return null;
+        }
+        
+        // Remove trailing slash if present
+        if (baseUrl.endsWith("/")) {
+            baseUrl = baseUrl.substring(0, baseUrl.length() - 1);
+        }
+        
+        switch (serverName.toLowerCase()) {
+            case "vidsrc":
+            case "vidsrc.to":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "vidjoy":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "multiembed":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "embed.su":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "autoembed.cc":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "smashystream":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "vidsrc.xyz":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "embedsoap":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "moviesapi.club":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "dbgo.fun":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "flixhq.to":
+                return baseUrl + "/watch/" + encodedTitle;
+            case "gomovies.sx":
+                return baseUrl + "/watch/" + encodedTitle;
+            case "showbox.media":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "primewire.mx":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "hdtoday.tv":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "vidcloud.to":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "streamwish.to":
+                return baseUrl + "/e/" + encodedTitle;
+            case "doodstream.com":
+                return baseUrl + "/e/" + encodedTitle;
+            case "streamtape.com":
+                return baseUrl + "/e/" + encodedTitle;
+            case "mixdrop.co":
+                return baseUrl + "/e/" + encodedTitle;
+            case "filemoon.sx":
+                return baseUrl + "/e/" + encodedTitle;
+            case "upstream.to":
+                return baseUrl + "/" + encodedTitle;
+            case "godriveplayer.com":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "2embed.cc":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "vidlink.pro":
+                return baseUrl + "/movie/" + encodedTitle;
+            case "streamlare.com":
+                return baseUrl + "/e/" + encodedTitle;
+            case "streamhub.to":
+                return baseUrl + "/e/" + encodedTitle;
+            case "nontonfilm":
+                return baseUrl + "/embed/" + encodedTitle;
+            case "cataz":
+                return baseUrl + "/embed/" + encodedTitle;
+            default:
+                return baseUrl + "/embed/" + encodedTitle;
+        }
+    }
+    
+    private boolean validateEmbedResponse(Response response, String serverName) {
+        try {
+            // Check if response is successful
+            if (!response.isSuccessful()) {
+                return false;
+            }
+            
+            // Check content type
+            String contentType = response.header("Content-Type");
+            if (contentType != null && contentType.contains("text/html")) {
+                // For HTML responses, check if it's not an error page
+                String body = response.body().string();
+                
+                // Check for common error indicators
+                String lowerBody = body.toLowerCase();
+                if (lowerBody.contains("404") || 
+                    lowerBody.contains("not found") || 
+                    lowerBody.contains("error") ||
+                    lowerBody.contains("page not found") ||
+                    lowerBody.contains("server error")) {
+                    return false;
+                }
+                
+                // Check for positive indicators (embed content, video player, etc.)
+                if (lowerBody.contains("video") || 
+                    lowerBody.contains("player") || 
+                    lowerBody.contains("embed") ||
+                    lowerBody.contains("iframe") ||
+                    lowerBody.contains("stream") ||
+                    lowerBody.contains("watch")) {
+                    return true;
+                }
+                
+                // If we can't determine, assume it's working if we got a successful response
+                return true;
+            }
+            
+            // For non-HTML responses, assume it's working if we got a successful response
+            return true;
+            
+        } catch (Exception e) {
+            Log.w(TAG, "Error validating response for " + serverName + ": " + e.getMessage());
+            return false;
+        }
+    }
+
+    public void checkServerStatusAsync(String serverName, ServerStatusCallback callback) {
+        executor.submit(() -> {
+            boolean isOnline = checkServerStatus(serverName);
+            callback.onResult(serverName, isOnline);
+        });
+    }
+
+    public void checkMultipleServerStatus(List<String> serverNames, MultipleServerStatusCallback callback) {
+        executor.submit(() -> {
+            List<ServerStatus> results = new ArrayList<>();
+            
+            for (String serverName : serverNames) {
+                boolean isOnline = checkServerStatus(serverName);
+                results.add(new ServerStatus(serverName, isOnline));
+            }
+            
+            callback.onComplete(results);
+        });
+    }
+
+    private String getBaseUrlForServer(String serverName) {
+        switch (serverName.toLowerCase()) {
+            case "vidsrc":
+                return "https://vidsrc.to";
+            case "vidjoy":
+                return "https://vidjoy.pro";
+            case "multiembed":
+                return "https://multiembed.mov";
+            case "embed.su":
+                return "https://embed.su";
+            case "autoembed.cc":
+                return "https://autoembed.cc";
+            case "smashystream":
+                return "https://smashystream.com";
+            case "vidsrc.to":
+                return "https://vidsrc.to";
+            case "vidsrc.xyz":
+                return "https://vidsrc.xyz";
+            case "embedsoap":
+                return "https://embedsoap.com";
+            case "moviesapi.club":
+                return "https://moviesapi.club";
+            case "dbgo.fun":
+                return "https://dbgo.fun";
+            case "flixhq.to":
+                return "https://flixhq.to";
+            case "gomovies.sx":
+                return "https://gomovies.sx";
+            case "showbox.media":
+                return "https://showbox.media";
+            case "primewire.mx":
+                return "https://primewire.mx";
+            case "hdtoday.tv":
+                return "https://hdtoday.tv";
+            case "vidcloud.to":
+                return "https://vidcloud.to";
+            case "streamwish.to":
+                return "https://streamwish.to";
+            case "doodstream.com":
+                return "https://doodstream.com";
+            case "streamtape.com":
+                return "https://streamtape.com";
+            case "mixdrop.co":
+                return "https://mixdrop.co";
+            case "filemoon.sx":
+                return "https://filemoon.sx";
+            case "upstream.to":
+                return "https://upstream.to";
+            case "godriveplayer.com":
+                return "https://godriveplayer.com";
+            case "2embed.cc":
+                return "https://2embed.cc";
+            case "vidlink.pro":
+                return "https://vidlink.pro";
+            default:
+                return null;
+        }
+    }
+
+    public List<String> getRecommendedServers() {
+        List<String> recommended = new ArrayList<>();
+        recommended.add("VidSrc");
+        recommended.add("VidJoy");
+        recommended.add("MultiEmbed");
+        recommended.add("AutoEmbed.cc");
+        recommended.add("VidSrc.to");
+        return recommended;
+    }
+
+    public List<String> getAllServers() {
+        List<String> allServers = new ArrayList<>();
+        allServers.add("VidSrc");
+        allServers.add("VidJoy");
+        allServers.add("MultiEmbed");
+        allServers.add("Embed.su");
+        allServers.add("AutoEmbed.cc");
+        allServers.add("SmashyStream");
+        allServers.add("VidSrc.to");
+        allServers.add("VidSrc.xyz");
+        allServers.add("EmbedSoap");
+        allServers.add("MoviesAPI.club");
+        allServers.add("DBGO.fun");
+        allServers.add("FlixHQ.to");
+        allServers.add("GoMovies.sx");
+        allServers.add("ShowBox.media");
+        allServers.add("PrimeWire.mx");
+        allServers.add("HDToday.tv");
+        allServers.add("VidCloud.to");
+        allServers.add("StreamWish.to");
+        allServers.add("DoodStream.com");
+        allServers.add("StreamTape.com");
+        allServers.add("MixDrop.co");
+        allServers.add("FileMoon.sx");
+        allServers.add("UpStream.to");
+        allServers.add("GoDrivePlayer.com");
+        allServers.add("2Embed.cc");
+        allServers.add("VidLink.pro");
+        return allServers;
+    }
+
+    public interface ServerStatusCallback {
+        void onResult(String serverName, boolean isOnline);
+    }
+
+    public interface MultipleServerStatusCallback {
+        void onComplete(List<ServerStatus> results);
+    }
+
+    public static class ServerStatus {
+        private String serverName;
+        private boolean isOnline;
+
+        public ServerStatus(String serverName, boolean isOnline) {
+            this.serverName = serverName;
+            this.isOnline = isOnline;
+        }
+
+        public String getServerName() {
+            return serverName;
+        }
+
+        public boolean isOnline() {
+            return isOnline;
+        }
+    }
+
+    public void shutdown() {
+        if (executor != null && !executor.isShutdown()) {
+            executor.shutdown();
+        }
+    }
+    
+    public void clearStatusCache() {
+        statusCache.clear();
+        Log.d(TAG, "Server status cache cleared");
+    }
+    
+    public void clearStatusCache(String serverName) {
+        statusCache.remove(serverName);
+        Log.d(TAG, "Server status cache cleared for: " + serverName);
+    }
+}
\ No newline at end of file
